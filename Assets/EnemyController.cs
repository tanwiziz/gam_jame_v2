// üü¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Vector3, Transform, GameObject, Time
using UnityEngine;
// üü¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å NavMeshAgent
using UnityEngine.AI; 

public class EnemyController : MonoBehaviour
{
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ô Inspector
    public float moveSpeed = 3f;     
    public float attackRange = 2f;   
    public float chaseRange = 15f;   

    public float attackCooldown = 1.5f; 
    private float lastAttackTime;        

    private Transform player;
    private NavMeshAgent agent;

    void Awake()
    {
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î Awake ‡πÄ‡∏î‡∏¥‡∏°) ...
        GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
        if (playerObj != null)
            player = playerObj.transform;

        agent = GetComponent<NavMeshAgent>();
        
        if (agent != null)
        {
            agent.speed = moveSpeed;
            agent.updateRotation = false; 
            // ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Ñ‡πà‡∏≤ Stopping Distance ‡∏Å‡∏±‡∏ö Attack Range ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        }

        lastAttackTime = -attackCooldown;
    }

    void Update()
    {
        if (player == null || agent == null || !agent.enabled)
            return;

        float distance = Vector3.Distance(transform.position, player.position);
        
        // 1. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏™‡∏°‡∏≠ (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
        LookAtDirection(player.position - transform.position); 

        // 2. ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡πà‡∏ï‡∏≤‡∏° (Chase Logic)
        if (distance <= chaseRange)
        {
            if (distance > agent.stoppingDistance)
            {
                agent.SetDestination(player.position);
                agent.isStopped = false;
            }
            else 
            {
                agent.isStopped = true;

                if (distance <= attackRange && Time.time >= lastAttackTime + attackCooldown)
                {
                    Attack();
                }
            }
        }
        else
        {
            agent.isStopped = true;
        }
    }

    /// <summary>‡∏´‡∏±‡∏ô‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</summary>
    void LookAtDirection(Vector3 direction)
    {
        // üü¢ Vector3 ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ using UnityEngine;
        Vector3 flatDirection = new Vector3(direction.x, 0, direction.z).normalized;
        
        if (flatDirection.sqrMagnitude > 0)
        {
            Quaternion lookRotation = Quaternion.LookRotation(flatDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * 10f); 
        }
    }

    /// <summary>‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ</summary>
    void Attack()
    {
        lastAttackTime = Time.time;
        Debug.Log($"{gameObject.name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô! (Cooldown: {attackCooldown}s)");
    }
}